@charset "UTF-8";
/*------------------------------------*\
    Monty's Plant Food -- Wireframes
\*------------------------------------*/
/*------------------------------------*\
    $VARS
\*------------------------------------*/
/**
 * Set up project-specific variables here which are then used throughout your
 * build. These variables are automatically picked up by inuit.css so you should
 * never need to modify any framework code.
 */
/**
 * Debug mode will visually highlight any potential markup/accessibility quirks
 * in the browser. Set to `true` or `false`.
 */
/**
 * Base stuff
 */
/**
 * How big would you like round corners to be by default?
 */
/**
 * Assign our `$base-line-height` to a new spacing var for more transparency.
 */
/**
 * Font-sizes (in pixels). Refer to relevant sections for their implementations.
 */
/**
 * Brand stuff
 */
/**
 * We need to supply a full code font-stack in order to combat this:
 * jsfiddle.net/csswizardry/uD6UW
 */
/*------------------------------------*\
    INUIT.CSS
\*------------------------------------*/
/**
 * 
 * inuitcss.com -- @inuitcss -- @csswizardry
 * 
 */
/**
 * inuit.css acts as a base stylesheet which you should extend with your own
 * theme stylesheet.
 * 
 * inuit.css aims to do the heavy lifting; sorting objects and abstractions,
 * design patterns and fiddly bits of CSS, whilst leaving as much design as
 * possible to you. inuit.css is the scaffolding to your decorator.
 * 
 * This stylesheet is heavily documented and contains lots of comments, please
 * take care to read and refer to them as you build. For further support please
 * tweet at @inuitcss.
 * 
 * Owing to the amount of comments please only ever use `inuit.min.css` in
 * production. This file is purely a dev document.
 * 
 * The table of contents below maps to section titles of the same name, to jump
 * to any section simply run a find for $[SECTION-TITLE].
 * 
 * Most objects and abstractions come with a chunk of markup that you should be
 * able to paste into any view to quickly see how the CSS works in conjunction
 * with the correct HTML.
 * 
 * inuit.css is written to this standard: github.com/csswizardry/CSS-Guidelines
 * 
 * LICENSE
 * 
 * Copyright 2012 Harry Roberts
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * Thank you for choosing inuit.css. May your floats remain cleared.
 */
/*------------------------------------*\
    $CONTENTS
\*------------------------------------*/
/**
 * CONTENTS............YouΓÇÖre reading it!
 * WARNING.............Here be dragons!
 * IMPORTS.............Begin importing the sections below
 * 
 * MIXINS..............Super-simple Sass stuff
 * RESET...............Set some defaults
 * CLEARFIX............
 * SHARED..............Shared declarations
 * 
 * MAIN................High-level elements like `html`, `body`, etc.
 * HEADINGS............Double-stranded heading hierarchy
 * PARAGRAPHS..........
 * SMALLPRINT..........Smaller text elements like `small`
 * QUOTES..............
 * CODE................
 * LINKS...............
 * LISTS...............
 * IMAGES..............
 * TABLES..............
 * FORMS...............
 * 
 * GRIDS...............Fluid, proportional and nestable grids
 * IE7-GRIDS...........Make the grids work in old IE
 * FLEXBOX.............Crudely emulate flexbox
 * COLUMNS.............CSS3 columns
 * NAV.................A simple abstraction to put a list in horizontal nav mode
 * OPTIONS.............Grouped nav items
 * PAGINATION..........Very stripped back, basic paginator
 * BREADCRUMB..........Simple breadcrumb trail object
 * MEDIA...............Media object
 * ISLAND..............Boxed off content
 * BLOCK-LIST..........Blocky lists of content
 * MATRIX..............Gridded lists
 * SPLIT...............A simple split-in-two object
 * THIS-OR-THIS........Options object
 * COMPLEX-LINK........
 * FLYOUT..............Flyout-on-hover object
 * SPRITE..............Generic spriting element
 * ICON-TEXT...........Icon and text couplings
 * BUTTONS.............
 * LOZENGES............Basic lozenge styles
 * GREYBOX.............Wireframing styles
 * 
 * WIDTHS..............Width classes for use alongside the grid system etc.
 * BRAND...............Helper class to apply brand treatment to elements
 * HELPER..............A series of helper classes to use arbitrarily
 * DEBUG...............Enable to add visual flags for debugging purposes
 */
/*------------------------------------*\
    $WARNING
\*------------------------------------*/
/*
 * inuit.css, being an OO framework, works in keeping with the open/closed
 * principle. The variables you set previously are now being used throughout
 * inuit.css to style everything we need for a base. Any custom styles SHOULD
 * NOT be added or modified in inuit.css directly, but added via your theme
 * stylesheet as per the open/closed principle:
 * 
 * csswizardry.com/2012/06/the-open-closed-principle-applied-to-css
 * 
 * Try not to edit any CSS beyond this point; if you find you need to do so
 * it is a failing of the framework so please tweet at @inuitcss.
 */
/*------------------------------------*\
    $IMPORTS
\*------------------------------------*/
/**
 * Generic utility styles etc.
 */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 * 
   `@include font-size(10);`
 * 
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */
/**
 * Create vendor-prefixed CSS in one go, e.g.
 * 
   `@include vendor(box-sizing, border-box);`
 * 
 */
/**
 * Create CSS keyframe animations for all vendors in one go, e.g.:
 * 
   .foo{
       @include vendor(animation, shrink 3s);
   }
   
   @include keyframe(shrink){
       from{
           font-size:5em;
       }
   }
 * 
 * Courtesy of @integralist: twitter.com/integralist/status/260484115315437569
 */
/**
 * Force overly long spans of text to truncate, e.g.:
 * 
   `@include truncate(100%);`
 * 
 * Where `$truncation-boundary` is a united measurement.
 */
/*------------------------------------*\
    $CLEARFIX
\*------------------------------------*/
/**
 * Micro clearfix, as per: nicolasgallagher.com/micro-clearfix-hack
 * Extend the clearfix class with Sass to avoid the `.cf` class appearing over
 * and over in your markup.
 */
/* line 9, ../sass/inuit.css/partials/generic/_clearfix.scss */
.cf, .nav, .media, .island,
.islet, .matrix, .multi-list, .header, .search, .wrapper, .main-home, .main, .gallery-wrap, .news-home, .news {
  zoom: 1;
}
/* line 13, ../sass/inuit.css/partials/generic/_clearfix.scss */
.cf:before, .nav:before, .media:before, .island:before,
.islet:before, .matrix:before, .multi-list:before, .header:before, .search:before, .wrapper:before, .main-home:before, .main:before, .gallery-wrap:before, .news-home:before, .news:before, .cf:after, .nav:after, .media:after, .island:after,
.islet:after, .matrix:after, .multi-list:after, .header:after, .search:after, .wrapper:after, .main-home:after, .main:after, .gallery-wrap:after, .news-home:after, .news:after {
  content: " ";
  display: table;
}
/* line 18, ../sass/inuit.css/partials/generic/_clearfix.scss */
.cf:after, .nav:after, .media:after, .island:after,
.islet:after, .matrix:after, .multi-list:after, .header:after, .search:after, .wrapper:after, .main-home:after, .main:after, .gallery-wrap:after, .news-home:after, .news:after {
  clear: both;
}

/*------------------------------------*\
    $SHARED
\*------------------------------------*/
/**
 * Where `margin-bottom` is concerned, this value will be the same as the
 * base line-height. This allows us to keep a consistent vertical rhythm.
 * As per: csswizardry.com/2012/06/single-direction-margin-declarations
 */
/**
 * Base elements
 */
/* line 25, ../sass/inuit.css/partials/generic/_shared.scss */
h1, h2, h3, h4, h5, h6, hgroup,
ul, ol, dl,
blockquote, p, address,
table,
fieldset, figure,
pre,
hr,
.sass-margin-bottom,
.form-fields > li,
.media,
.island,
.islet {
  margin-bottom: 24px;
  margin-bottom: 1.5rem;
}
/* line 29, ../sass/inuit.css/partials/generic/_shared.scss */
.islet h1, .islet h2, .islet h3, .islet h4, .islet h5, .islet h6, .islet hgroup, .islet
ul, .islet ol, .islet dl, .islet
blockquote, .islet p, .islet address, .islet
table, .islet
fieldset, .islet figure, .islet
pre, .islet
hr, .islet
.sass-margin-bottom, .islet .form-fields > li, .islet
.media, .islet
.island, .islet
.islet {
  margin-bottom: 12px;
  margin-bottom: 0.75rem;
}

/**
 * Doubled up `margin-bottom` helper class.
 */
/* line 39, ../sass/inuit.css/partials/generic/_shared.scss */
.landmark {
  margin-bottom: 48px;
  margin-bottom: 3rem;
}

/**
 * Where `margin-left` is concerned we want to try and indent certain elements
 * by a consistent amount. Define that amount once, here.
 */
/* line 49, ../sass/inuit.css/partials/generic/_shared.scss */
ul, ol, dd {
  margin-left: 48px;
  margin-left: 3rem;
}

/**
 * Base styles; unclassed HTML elements etc.
 */
/*------------------------------------*\
    $MAIN
\*------------------------------------*/
/* line 4, ../sass/inuit.css/partials/base/_main.scss */
html {
  font: 1em/1.5 serif;
  overflow-y: scroll;
}

/*------------------------------------*\
    $HEADINGS
\*------------------------------------*/
/**
 * As per: csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css
 * 
 * When we define a heading we also define a corresponding class to go with it.
 * This allows us to apply, say, `class=alpha` to a `h3`; a double-stranded
 * heading hierarchy.
 */
/* line 11, ../sass/inuit.css/partials/base/_headings.scss */
h1, .alpha {
  font-size: 36px;
  font-size: 2.25rem;
  line-height: 1.33333;
}

/* line 14, ../sass/inuit.css/partials/base/_headings.scss */
h2, .beta {
  font-size: 30px;
  font-size: 1.875rem;
  line-height: 1.6;
}

/* line 17, ../sass/inuit.css/partials/base/_headings.scss */
h3, .gamma {
  font-size: 24px;
  font-size: 1.5rem;
  line-height: 1;
}

/* line 20, ../sass/inuit.css/partials/base/_headings.scss */
h4, .delta {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2;
}

/* line 23, ../sass/inuit.css/partials/base/_headings.scss */
h5, .epsilon {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5;
}

/* line 26, ../sass/inuit.css/partials/base/_headings.scss */
h6, .zeta {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429;
}

/**
 * Heading groups and generic any-heading class.
 * To target any heading of any level simply apply a class of `.hN`, e.g.:
 * 
   <hgroup>
       <h1 class=hN>inuit.css</h1>
       <h2 class=hN>Best. Framework. Ever!</h2>
   </hgroup>
 * 
 */
/* line 43, ../sass/inuit.css/partials/base/_headings.scss */
hgroup .hN {
  margin-bottom: 0;
}

/**
 * A series of classes for setting massive type; for use in heroes, mastheads,
 * promos, etc.
 */
/* line 52, ../sass/inuit.css/partials/base/_headings.scss */
.giga {
  font-size: 96px;
  font-size: 6rem;
  line-height: 1;
}

/* line 55, ../sass/inuit.css/partials/base/_headings.scss */
.mega {
  font-size: 72px;
  font-size: 4.5rem;
  line-height: 1;
}

/* line 58, ../sass/inuit.css/partials/base/_headings.scss */
.kilo {
  font-size: 48px;
  font-size: 3rem;
  line-height: 1;
}

/*------------------------------------*\
    $PARAGRAPHS
\*------------------------------------*/
/**
 * The `.lede` class is used to make the introductory text (usually a paragraph)
 * of a document slightly larger.
 */
/* line 9, ../sass/inuit.css/partials/base/_paragraphs.scss */
.lede,
.lead {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.33333;
}

/*------------------------------------*\
    $SMALLPRINT
\*------------------------------------*/
/**
 * A series of classes for setting tiny type; for use in smallprint etc.
 * 
 * `small` is relative to whatever its parent is, `.milli` and `.micro` are
 * absolute.
 */
/* line 10, ../sass/inuit.css/partials/base/_smallprint.scss */
small {
  font-size: 0.75em;
}

/* line 14, ../sass/inuit.css/partials/base/_smallprint.scss */
.smallprint,
.milli {
  font-size: 12px;
  font-size: 0.75rem;
  line-height: 2;
  line-height: 1;
  /* 12px */
}

/* line 18, ../sass/inuit.css/partials/base/_smallprint.scss */
.micro {
  font-size: 10px;
  font-size: 0.625rem;
  line-height: 2.4;
  line-height: 1.2;
  /* 12px */
}

/*------------------------------------*\
    $QUOTES
\*------------------------------------*/
/**
 * Big up @boblet: html5doctor.com/blockquote-q-cite
 */
/* line 7, ../sass/inuit.css/partials/base/_quotes.scss */
q {
  quotes: "ΓÇÿ" "ΓÇÖ" "ΓÇ£" "ΓÇ¥";
}

/* line 9, ../sass/inuit.css/partials/base/_quotes.scss */
q:before {
  content: "ΓÇÿ";
  content: open-quote;
}

/* line 10, ../sass/inuit.css/partials/base/_quotes.scss */
q:after {
  content: "ΓÇÖ";
  content: close-quote;
}

/* line 12, ../sass/inuit.css/partials/base/_quotes.scss */
q q:before {
  content: "ΓÇ£";
  content: open-quote;
}

/* line 13, ../sass/inuit.css/partials/base/_quotes.scss */
q q:after {
  content: "ΓÇ¥";
  content: close-quote;
}

/* line 15, ../sass/inuit.css/partials/base/_quotes.scss */
blockquote {
  quotes: "ΓÇ£" "ΓÇ¥";
}

/* line 16, ../sass/inuit.css/partials/base/_quotes.scss */
blockquote p:before {
  content: "ΓÇ£";
  content: open-quote;
}

/* line 17, ../sass/inuit.css/partials/base/_quotes.scss */
blockquote p:after {
  content: "";
  content: no-close-quote;
}

/* line 18, ../sass/inuit.css/partials/base/_quotes.scss */
blockquote p:last-of-type:after {
  content: "ΓÇ¥";
  content: close-quote;
}

/**
 * 
   <blockquote>
       <p>Insanity: doing the same thing over and over again and expecting
       different results.</p>
       <b class=source>Albert Einstein</b>
   </blockquote>
 * 
 */
/* line 30, ../sass/inuit.css/partials/base/_quotes.scss */
blockquote {
  /**
   * .4em is roughly equal to the width of the opening ΓÇ£ that we wish to hang.
   */
  text-indent: -0.4em;
}
/* line 36, ../sass/inuit.css/partials/base/_quotes.scss */
blockquote p:last-of-type {
  margin-bottom: 0;
}

/* line 41, ../sass/inuit.css/partials/base/_quotes.scss */
.source {
  display: block;
  text-indent: 0;
}
/* line 45, ../sass/inuit.css/partials/base/_quotes.scss */
.source:before {
  content: "ΓÇö";
}

/*------------------------------------*\
    $CODE
\*------------------------------------*/
/**
 * Use an explicit font stack to ensure browsers render correct `line-height`.
 */
/* line 7, ../sass/inuit.css/partials/base/_code.scss */
pre, code, samp, kbd {
  font-family: Inconsolata, Monaco, Consolas, "Andale Mono", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace;
}

/* line 10, ../sass/inuit.css/partials/base/_code.scss */
pre {
  overflow: auto;
}

/* line 13, ../sass/inuit.css/partials/base/_code.scss */
pre mark {
  background: none;
  border-bottom: 1px solid;
  color: inherit;
}

/**
 * Add comments to your code examples, e.g.:
 * 
   <code>&lt;/div&gt;<span class=code-comment>&lt;!-- /wrapper --&gt;</span></code>
 * 
 */
/* line 26, ../sass/inuit.css/partials/base/_code.scss */
.code-comment {
  /**
   * Override this setting in your theme stylesheet
   */
  opacity: 0.75;
  filter: alpha(opacity=75);
}

/**
 * You can add line numbers to your code examples but be warned, it requires
 * some pretty funky looking (and technically invalid) markup, e.g.:
 * 
   <pre class=numbered>
       <ol class=numbered__numbers>
           <li><code>.nav{</code></li>
           <li><code>    list-style:none;</code></li>
           <li><code>    margin-left:0;</code></li>
           <li><code>}</code></li>
           <li><code>    .nav > li,</code></li>
           <li><code>        .nav > li > a{</code></li>
           <li><code>            display:inline-block;</code></li>
           <li><code>           *display:inline-block;</code></li>
           <li><code>            zoom:1;</code></li>
           <li><code>        }</code></li>
       </ol>
   </pre>
 * 
 */
/* line 55, ../sass/inuit.css/partials/base/_code.scss */
.numbered {
  white-space: nowrap;
}

/* line 58, ../sass/inuit.css/partials/base/_code.scss */
.numbered__numbers {
  list-style: decimal-leading-zero inside;
  margin-bottom: 0;
  margin-left: 0;
}

/* line 63, ../sass/inuit.css/partials/base/_code.scss */
.numbered__numbers code {
  white-space: pre;
}

/*------------------------------------*\
    $LINKS
\*------------------------------------*/
/**
 * Say no to negative hovers, as per: csswizardry.com/2011/05/on-negative-hovers
 */
/* line 7, ../sass/inuit.css/partials/base/_links.scss */
a {
  /**
   * Set colors etc in your theme stylesheet.
   */
}
/* line 14, ../sass/inuit.css/partials/base/_links.scss */
a:hover, a:active, a:focus {
  text-decoration: underline;
}
/* line 18, ../sass/inuit.css/partials/base/_links.scss */
a:active, a:focus {
  outline: none;
}

/**
 * ΓÇÿCurrentΓÇÖ states, e.g.:
 * 
   <ul class=nav>
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li class=current><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 * 
 */
/* line 35, ../sass/inuit.css/partials/base/_links.scss */
.current a {
  cursor: text;
  text-decoration: underline;
}

/*------------------------------------*\
    $IMAGES
\*------------------------------------*/
/* line 4, ../sass/inuit.css/partials/base/_images.scss */
img {
  max-width: 100%;
  height: auto;
}

/* line 8, ../sass/inuit.css/partials/base/_images.scss */
figure > img {
  display: block;
}

/*------------------------------------*\
    $LISTS
\*------------------------------------*/
/**
 * Remove vertical spacing from nested lists.
 */
/* line 9, ../sass/inuit.css/partials/base/_lists.scss */
li > ul,
li > ol {
  margin-bottom: 0;
}

/*------------------------------------*\
    $TABLES
\*------------------------------------*/
/**
 * We have a lot at our disposal for making very complex table constructs, e.g.:
 * 
   <table class="table--bordered  table--striped  table--data">
       <colgroup>
           <col class=t10>
           <col class=t10>
           <col class=t10>
           <col>
       </colgroup>
       <thead>
           <tr>
               <th colspan=3>Foo</th>
               <th>Bar</th>
           </tr>
               <th>Lorem</th>
               <th>Ipsum</th>
               <th class=numerical>Dolor</th>
               <th>Sit</th>
           </tr>
       </thead>
       <tbody>
           <tr>
               <th rowspan=3>Sit</th>
               <td>Dolor</td>
               <td class=numerical>03.788</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <td>Dolor</td>
               <td class=numerical>32.210</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <td>Dolor</td>
               <td class=numerical>47.797</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <th rowspan=2>Sit</th>
               <td>Dolor</td>
               <td class=numerical>09.640</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <td>Dolor</td>
               <td class=numerical>12.117</td>
               <td>Lorem</td>
           </tr>
       </tbody>
   </table>
 * 
 */
/* line 57, ../sass/inuit.css/partials/base/_tables.scss */
table {
  width: 100%;
}

/* line 61, ../sass/inuit.css/partials/base/_tables.scss */
th,
td {
  padding: 6px;
  text-align: left;
}
@media screen and (min-width: 480px) {
  /* line 61, ../sass/inuit.css/partials/base/_tables.scss */
  th,
  td {
    padding: 12px;
  }
}

/**
 * Cell alignments
 */
/* line 73, ../sass/inuit.css/partials/base/_tables.scss */
[colspan] {
  text-align: center;
}

/* line 76, ../sass/inuit.css/partials/base/_tables.scss */
[colspan="1"] {
  text-align: left;
}

/* line 79, ../sass/inuit.css/partials/base/_tables.scss */
[rowspan] {
  vertical-align: middle;
}

/* line 82, ../sass/inuit.css/partials/base/_tables.scss */
[rowspan="1"] {
  vertical-align: top;
}

/* line 85, ../sass/inuit.css/partials/base/_tables.scss */
.numerical {
  text-align: right;
}

/**
 * In the HTML above we see several `col` elements with classes whose numbers
 * represent a percentage width for that column. We leave one column free of a
 * class so that column can soak up the effects of any accidental breakage in
 * the table.
 */
/* line 95, ../sass/inuit.css/partials/base/_tables.scss */
.t5 {
  width: 5%;
}

/* line 96, ../sass/inuit.css/partials/base/_tables.scss */
.t10 {
  width: 10%;
}

/* line 97, ../sass/inuit.css/partials/base/_tables.scss */
.t12 {
  width: 12.5%;
}

/* 1/8 */
/* line 98, ../sass/inuit.css/partials/base/_tables.scss */
.t15 {
  width: 15%;
}

/* line 99, ../sass/inuit.css/partials/base/_tables.scss */
.t20 {
  width: 20%;
}

/* line 100, ../sass/inuit.css/partials/base/_tables.scss */
.t25 {
  width: 25%;
}

/* 1/4 */
/* line 101, ../sass/inuit.css/partials/base/_tables.scss */
.t30 {
  width: 30%;
}

/* line 102, ../sass/inuit.css/partials/base/_tables.scss */
.t33 {
  width: 33.333%;
}

/* 1/3 */
/* line 103, ../sass/inuit.css/partials/base/_tables.scss */
.t35 {
  width: 35%;
}

/* line 104, ../sass/inuit.css/partials/base/_tables.scss */
.t37 {
  width: 37.5%;
}

/* 3/8 */
/* line 105, ../sass/inuit.css/partials/base/_tables.scss */
.t40 {
  width: 40%;
}

/* line 106, ../sass/inuit.css/partials/base/_tables.scss */
.t45 {
  width: 45%;
}

/* line 107, ../sass/inuit.css/partials/base/_tables.scss */
.t50 {
  width: 50%;
}

/* 1/2 */
/* line 108, ../sass/inuit.css/partials/base/_tables.scss */
.t55 {
  width: 55%;
}

/* line 109, ../sass/inuit.css/partials/base/_tables.scss */
.t60 {
  width: 60%;
}

/* line 110, ../sass/inuit.css/partials/base/_tables.scss */
.t62 {
  width: 62.5%;
}

/* 5/8 */
/* line 111, ../sass/inuit.css/partials/base/_tables.scss */
.t65 {
  width: 65%;
}

/* line 112, ../sass/inuit.css/partials/base/_tables.scss */
.t66 {
  width: 66.666%;
}

/* 2/3 */
/* line 113, ../sass/inuit.css/partials/base/_tables.scss */
.t70 {
  width: 70%;
}

/* line 114, ../sass/inuit.css/partials/base/_tables.scss */
.t75 {
  width: 75%;
}

/* 3/4*/
/* line 115, ../sass/inuit.css/partials/base/_tables.scss */
.t80 {
  width: 80%;
}

/* line 116, ../sass/inuit.css/partials/base/_tables.scss */
.t85 {
  width: 85%;
}

/* line 117, ../sass/inuit.css/partials/base/_tables.scss */
.t87 {
  width: 87.5%;
}

/* 7/8 */
/* line 118, ../sass/inuit.css/partials/base/_tables.scss */
.t90 {
  width: 90%;
}

/* line 119, ../sass/inuit.css/partials/base/_tables.scss */
.t95 {
  width: 95%;
}

/**
 * Bordered tables
 */
/* line 128, ../sass/inuit.css/partials/base/_tables.scss */
.table--bordered th,
.table--bordered td {
  border: 1px solid #ccc;
  /* Override this color in your theme stylesheet */
}
/* line 131, ../sass/inuit.css/partials/base/_tables.scss */
.table--bordered th:empty,
.table--bordered td:empty {
  border: none;
}
/* line 136, ../sass/inuit.css/partials/base/_tables.scss */
.table--bordered thead tr:last-child th {
  border-bottom-width: 2px;
}
/* line 140, ../sass/inuit.css/partials/base/_tables.scss */
.table--bordered tbody tr th:last-of-type {
  border-right-width: 2px;
}

/**
 * Striped tables
 */
/* line 151, ../sass/inuit.css/partials/base/_tables.scss */
.table--striped tbody tr:nth-of-type(odd) {
  background-color: #ffc;
  /* Override this color in your theme stylesheet */
}

/**
 * Data table
 */
/* line 160, ../sass/inuit.css/partials/base/_tables.scss */
.table--data {
  font: 12px/1.5 sans-serif;
}

/*------------------------------------*\
    $FORMS
\*------------------------------------*/
/**
 * 
 * Demo: jsfiddle.net/inuitcss/MhHHU
 * 
 */
/* line 9, ../sass/inuit.css/partials/base/_forms.scss */
fieldset {
  padding: 24px;
}

/**
 * Text inputs
 * 
 * Instead of a `[type]` selector for each kind of form input, we just use a
 * class to target any/every one, e.g.:
   <input type=text class=text-input>
   <input type=email class=text-input>
   <input type=password class=text-input>
 * 
 */
/* line 25, ../sass/inuit.css/partials/base/_forms.scss */
.text-input,
textarea {
  /**
   * Style these via your theme stylesheet.
   */
}

/**
 * Group sets of form fields in a list, e.g.:
 * 
   <ul class=form-fields>
       <li>
           <label />
           <input />
       </li>
       <li>
           <label />
           <select />
       </li>
       <li>
           <label />
           <input />
       </li>
   </ul>
 * 
 */
/* line 51, ../sass/inuit.css/partials/base/_forms.scss */
.form-fields {
  list-style: none;
  margin: 0;
}

/* line 58, ../sass/inuit.css/partials/base/_forms.scss */
.form-fields > li:last-child {
  margin-bottom: 0;
}

/**
 * Labels
 * 
 * Define a `.label` class as well as a `label` element. This means we can apply
 * label-like styling to meta-labels for groups of options where a `label`
 * element is not suitable, e.g.:
 * 
   <li>
       <span class=label>Select an option below:</span>
       <ul class="multi-list  four-cols">
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
       </ul>
   </li>
 * 
 */
/* line 90, ../sass/inuit.css/partials/base/_forms.scss */
label,
.label {
  display: block;
}

/**
 * Extra help text in `label`s, e.g.:
 * 
   <label>Card number <small class=additional>No spaces</small></label>
 * 
 */
/* line 99, ../sass/inuit.css/partials/base/_forms.scss */
.additional {
  display: block;
  font-weight: normal;
}

/*
 * Groups of checkboxes and radios, e.g.:
 * 
   <li>
       <ul class=check-list>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
       </ul>
   </li>
 * 
 */
/* line 120, ../sass/inuit.css/partials/base/_forms.scss */
.check-list {
  list-style: none;
  margin: 0;
}

/*
 * Labels in check-lists
 */
/* line 129, ../sass/inuit.css/partials/base/_forms.scss */
.check-label,
.check-list label,
.check-list .label {
  display: inline-block;
}

/**
 * Spoken forms are for forms that read like spoken word, e.g.:
 * 
   <li class=spoken-form>
       Hello, my <label for=spoken-name>name</label> is
       <input type=text class=text-input id=spoken-name>. My home
       <label for=country>country</label> is
       <select id=country>
           <option>UK</option>
           <option>US</option>
           <option>Other</option>
       </select>
   </li>
 * 
 */
/* line 149, ../sass/inuit.css/partials/base/_forms.scss */
.spoken-form label {
  display: inline-block;
  font: inherit;
}

/**
 * Objects and abstractions
 * 
 * Single-line comment (//) out any objects you do not need in your project.
 */
/*------------------------------------*\
    $FLEXBOX
\*------------------------------------*/
/**
 * Until we can utilise flexbox natively we can kinda, sorta, attempt to emulate
 * it, in a way... e.g.:
 * 
   <header class=flexbox>
       
       <div class=flexbox__item>
           <b>Welcome to</b>
       </div>
       
       <div class=flexbox__item>
           <img src="//csswizardry.com/inuitcss/img/logo.jpg" alt="inuit.css">
       </div>
   
   </header>
 * 
 * We can also combine our grid system classes with `.flexbox__item` classes,
 * e.g.:
 * 
   <div class=flexbox>
       <div class="flexbox__item  one-quarter">
       </div>
       <div class="flexbox__item  three-quarters">
       </div>
   </div>
 * 
 * ItΓÇÖs pretty poorly named IΓÇÖm afraid, but it worksΓÇª
 */
/* line 32, ../sass/inuit.css/partials/objects/_flexbox.scss */
.flexbox {
  display: table;
  width: 100%;
}

/* line 36, ../sass/inuit.css/partials/objects/_flexbox.scss */
.flexbox__item {
  display: table-cell;
  vertical-align: middle;
}

/*------------------------------------*\
    $COLUMNS
\*------------------------------------*/
/**
 * Here we can set elements in columns of text using CSS3, e.g.:
 * 
   <p class=text-cols-2>
 * 
 * Demo: jsfiddle.net/inuitcss/E26Yd
 * 
 */
/* line 16, ../sass/inuit.css/partials/objects/_columns.scss */
.text-cols,
.text-cols--2,
.text-cols--3,
.text-cols--4,
.text-cols--5 {
  -webkit-column-gap: 24px;
  -moz-column-gap: 24px;
  -ms-column-gap: 24px;
  -o-column-gap: 24px;
  column-gap: 24px;
}

/* line 19, ../sass/inuit.css/partials/objects/_columns.scss */
.text-cols--2 {
  -webkit-column-count: 2;
  -moz-column-count: 2;
  -ms-column-count: 2;
  -o-column-count: 2;
  column-count: 2;
}

/* line 20, ../sass/inuit.css/partials/objects/_columns.scss */
.text-cols--3 {
  -webkit-column-count: 3;
  -moz-column-count: 3;
  -ms-column-count: 3;
  -o-column-count: 3;
  column-count: 3;
}

/* line 21, ../sass/inuit.css/partials/objects/_columns.scss */
.text-cols--4 {
  -webkit-column-count: 4;
  -moz-column-count: 4;
  -ms-column-count: 4;
  -o-column-count: 4;
  column-count: 4;
}

/* line 22, ../sass/inuit.css/partials/objects/_columns.scss */
.text-cols--5 {
  -webkit-column-count: 5;
  -moz-column-count: 5;
  -ms-column-count: 5;
  -o-column-count: 5;
  column-count: 5;
}

/*------------------------------------*\
    $NAV
\*------------------------------------*/
/**
 * Nav abstraction as per: csswizardry.com/2011/09/the-nav-abstraction
 * When used on an `ol` or `ul`, this class throws the list into horizontal mode
 * e.g.:
 * 
   <ul class=nav>
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 * 
 * Demo: jsfiddle.net/inuitcss/Vnph4
 * 
 */
/* line 19, ../sass/inuit.css/partials/objects/_nav.scss */
.nav {
  list-style: none;
  margin-left: 0;
}
/* line 25, ../sass/inuit.css/partials/objects/_nav.scss */
.nav > li,
.nav > li > a {
  display: inline-block;
  *display: inline;
  zoom: 1;
}

/**
 * `.stacked` extends `.nav` and throws the list into vertical mode, e.g.:
 * 
   <ul class="nav  nav--stacked">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 * 
 */
/* line 46, ../sass/inuit.css/partials/objects/_nav.scss */
.nav--stacked > li {
  display: list-item;
}
/* line 49, ../sass/inuit.css/partials/objects/_nav.scss */
.nav--stacked > li > a {
  display: block;
}

/**
 * `.banner-nav` extends `.nav` and centres the list, e.g.:
 * 
   <ul class="nav  nav--banner">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 * 
 */
/* line 67, ../sass/inuit.css/partials/objects/_nav.scss */
.nav--banner {
  text-align: center;
}

/**
 * Give nav links a big, blocky hit area. Extends `.nav` and needs whitespace
 * caused by `inline-block` elements needs collapsing e.g.:
 * 
   <ul class="nav  nav--block">
       <li><a href=#>Home</a></li><!--
    --><li><a href=#>About</a></li><!--
    --><li><a href=#>Portfolio</a></li><!--
    --><li><a href=#>Contact</a></li>
   </ul>
 * 
 */
/* line 84, ../sass/inuit.css/partials/objects/_nav.scss */
.nav--block, .options {
  line-height: 1;
}
/* line 89, ../sass/inuit.css/partials/objects/_nav.scss */
.nav--block > li > a, .options > li > a {
  padding: 12px;
}

/**
 * Force a nav to occupy 100% of the available width of its parent. Extends
 * `.nav`, e.g.:
 * 
   <ul class="nav  nav--fit">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 * 
 * Thanks to @pimpl for this idea!
 */
/* line 109, ../sass/inuit.css/partials/objects/_nav.scss */
.nav--fit {
  display: table;
  width: 100%;
}
/* line 113, ../sass/inuit.css/partials/objects/_nav.scss */
.nav--fit > li {
  display: table-cell;
}
/* line 116, ../sass/inuit.css/partials/objects/_nav.scss */
.nav--fit > li > a {
  display: block;
}

/*------------------------------------*\
    $OPTIONS
\*------------------------------------*/
/**
 * Link-group nav, used for displaying related options. Extends `.nav--block`
 * but could also extend `.nav--fit`. Extend with colours and ΓÇÿcurrent statesΓÇÖ
 * in your theme stylesheet.
 * 
  <ul class="nav  options">
      <li><a></a></li> 
      <li><a></a></li> 
      <li><a></a></li> 
      <li><a></a></li> 
   </ul>
 * 
 * Demo: jsfiddle.net/inuitcss/vwfaf
 * 
 */
/* line 24, ../sass/inuit.css/partials/objects/_options.scss */
.options > li > a {
  border: 0 solid #ccc;
  /* Extend in your theme stylesheet */
  border-width: 1px;
  border-left-width: 0;
}
/* line 30, ../sass/inuit.css/partials/objects/_options.scss */
.options > li:first-child > a {
  border-left-width: 1px;
  -webkit-border-radius: 4px 0 0 4px;
  -moz-border-radius: 4px 0 0 4px;
  -ms-border-radius: 4px 0 0 4px;
  -o-border-radius: 4px 0 0 4px;
  border-radius: 4px 0 0 4px;
}
/* line 35, ../sass/inuit.css/partials/objects/_options.scss */
.options > li:last-child > a {
  -webkit-border-radius: 0 4px 4px 0;
  -moz-border-radius: 0 4px 4px 0;
  -ms-border-radius: 0 4px 4px 0;
  -o-border-radius: 0 4px 4px 0;
  border-radius: 0 4px 4px 0;
}

/*------------------------------------*\
    $PAGINATION
\*------------------------------------*/
/**
 * Basic pagination object, extends `.nav`.
 * Requires some funky commenting to collapse any white-space caused by the
 * `display:inline-block;` rules.
 * 
   <ol class="nav  pagination">
       <li class=pagination__first>First</li><!--
    --><li class=pagination__prev>Previous</li><!--
    --><li><a href=/page/1>1</a></li><!--
    --><li><a href=/page/2>2</a></li><!--
    --><li class=current><a href=/page/3>3</a></li><!--
    --><li><a href=/page/4>4</a></li><!--
    --><li><a href=/page/5>5</a></li><!--
    --><li class=pagination__next><a href=/page/next>Next</a></li><!--
    --><li class=pagination__last><a href=/page/last>Last</a></li>
   </ol>
 * 
 * Demo: jsfiddle.net/inuitcss/9Y6PU
 * 
 */
/* line 24, ../sass/inuit.css/partials/objects/_pagination.scss */
.pagination {
  text-align: center;
}

/* line 27, ../sass/inuit.css/partials/objects/_pagination.scss */
.pagination > li {
  padding: 12px;
}

/* line 30, ../sass/inuit.css/partials/objects/_pagination.scss */
.pagination > li > a {
  padding: 12px;
  margin: -12px;
}

/* line 34, ../sass/inuit.css/partials/objects/_pagination.scss */
.pagination__first a:before {
  content: "┬½ ";
}

/* line 37, ../sass/inuit.css/partials/objects/_pagination.scss */
.pagination__last a:after {
  content: " ┬╗";
}

/*------------------------------------*\
    $BREADCRUMB
\*------------------------------------*/
/**
 * Simple breadcrumb styling to apply to (ordered) lists. Extends `.nav`, e.g.:
 * 
   <ol class="nav  breadcrumb">
       <li><a href="#">Home</a></li>
       <li><a href="#">About</a></li>
       <li><a href="#">The Board</a></li>
       <li class="current"><a href="#">Directors</a></li>
   </ol>
 * 
 * Demo: jsfiddle.net/inuitcss/rkAY9
 * 
 */
/* line 17, ../sass/inuit.css/partials/objects/_breadcrumb.scss */
.breadcrumb > li + li:before {
  content: "┬╗ ";
}

/**
 * For denoting a path-like structure, GitHub style, e.g.:
 * 
   <ol class="nav  breadcrumb--path">
       <li class="breadcrumb__root"><a href="#">inuit.css</a></li>
       <li><a href="#">inuit.css</a></li>
       <li><a href="#">partials</a></li>
       <li class="current"><a href="#">objects</a></li>
   </ol>
 * 
 */
/* line 33, ../sass/inuit.css/partials/objects/_breadcrumb.scss */
.breadcrumb--path > li + li:before {
  content: "/ ";
}

/**
 * Assign a delimiter on the fly through a data attribute, e.g.:
 * 
   <ol class="nav  breadcrumb">
       <li><a href="#">Home</a></li>
       <li data-breadcrumb="|"><a href="#">About</a></li>
       <li data-breadcrumb="|"><a href="#">The Board</a></li>
       <li data-breadcrumb="|" class="current"><a href="#">Directors</a></li>
   </ol>
 * 
 */
/* line 49, ../sass/inuit.css/partials/objects/_breadcrumb.scss */
.breadcrumb > li + li[data-breadcrumb]:before {
  content: attr(data-breadcrumb) " ";
}

/**
 * Denote the root of the tree.
 */
/* line 57, ../sass/inuit.css/partials/objects/_breadcrumb.scss */
.breadcrumb__root {
  font-weight: bold;
}

/*------------------------------------*\
    $MEDIA
\*------------------------------------*/
/**
 * Place any image- and text-like content side-by-side, as per:
 * stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code
 * E.g.:
 * 
   <div class=media>
       <img src=http://placekitten.com/200/300 alt="" class=media__img>
       <p class=media__body>Lorem ipsum dolor sit amet, consectetur adipisicing elit,
       sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
   </div>
 * 
 * Demo: jsfiddle.net/inuitcss/cf4Qs
 * 
 */
/* line 18, ../sass/inuit.css/partials/objects/_media.scss */
.media {
  display: block;
}

/* line 22, ../sass/inuit.css/partials/objects/_media.scss */
.media__img {
  float: left;
  margin-right: 24px;
}

/**
 * Reversed image location (right instead of left).
 */
/* line 29, ../sass/inuit.css/partials/objects/_media.scss */
.media__img--rev {
  float: right;
  margin-left: 24px;
}

/* line 35, ../sass/inuit.css/partials/objects/_media.scss */
.media__img img,
.media__img--rev img {
  display: block;
}

/* line 39, ../sass/inuit.css/partials/objects/_media.scss */
.media__body {
  overflow: hidden;
}

/* line 43, ../sass/inuit.css/partials/objects/_media.scss */
.media__body,
.media__body > :last-child {
  margin-bottom: 0;
}

/**
 * `.img`s in `.islet`s need an appropriately sized margin.
 */
/* line 51, ../sass/inuit.css/partials/objects/_media.scss */
.islet .media__img {
  margin-right: 12px;
}

/* line 54, ../sass/inuit.css/partials/objects/_media.scss */
.islet .media__img--rev {
  margin-left: 12px;
}

/*------------------------------------*\
    $ISLAND
\*------------------------------------*/
/**
 * Simple, boxed off content, as per: csswizardry.com/2011/10/the-island-object
 * E.g.:
 * 
   <div class=island>
       I am boxed off.
   </div>
 * 
 * Demo: jsfiddle.net/inuitcss/u8pV3
 * 
 */
/* line 16, ../sass/inuit.css/partials/objects/_island.scss */
.island,
.islet {
  display: block;
}

/* line 20, ../sass/inuit.css/partials/objects/_island.scss */
.island {
  padding: 24px;
}

/* line 24, ../sass/inuit.css/partials/objects/_island.scss */
.island > :last-child,
.islet > :last-child {
  margin-bottom: 0;
}

/**
 * Just like `.island`, only smaller.
 */
/* line 32, ../sass/inuit.css/partials/objects/_island.scss */
.islet {
  padding: 12px;
}

/*------------------------------------*\
    $BLOCK-LIST
\*------------------------------------*/
/**
 * Create big blocky lists of content, e.g.:
 * 
   <ul class=block-list>
      <li>Foo</li>
      <li>Bar</li>
      <li>Baz</li>
      <li><a href=# class=block-list__link>Foo Bar Baz</a></li>
   </ul>
 * 
 * Extend this object in your theme stylesheet.
 * 
 * Demo: jsfiddle.net/inuitcss/hR57q
 * 
 */
/* line 20, ../sass/inuit.css/partials/objects/_block-list.scss */
.block-list,
.block-list > li {
  border: 0 solid #ccc;
  /* Override this color in your theme stylesheet */
}

/* line 23, ../sass/inuit.css/partials/objects/_block-list.scss */
.block-list {
  list-style: none;
  margin-left: 0;
  border-top-width: 1px;
}

/* line 28, ../sass/inuit.css/partials/objects/_block-list.scss */
.block-list > li {
  border-bottom-width: 1px;
  padding: 12px;
}

/* line 32, ../sass/inuit.css/partials/objects/_block-list.scss */
.block-list__link {
  display: block;
  padding: 12px;
  margin: -12px;
}

/*------------------------------------*\
    $MATRIX
\*------------------------------------*/
/**
 * Create a grid of items out of a single list, e.g.:
 * 
   <ul class="matrix  three-cols">
       <li class=all-cols>Lorem</li>
       <li>Ipsum <a href=#>dolor</a></li>
       <li><a href=# class=matrix__link>Sit</a></li>
       <li>Amet</li>
       <li class=all-cols>Consectetuer</li>
   </ul>
 * 
 * Extend this object in your theme stylesheet.
 * 
 * Demo: jsfiddle.net/inuitcss/Y2zrU
 * 
 */
/* line 21, ../sass/inuit.css/partials/objects/_matrix.scss */
.matrix,
.matrix > li {
  border: 0 solid #ccc;
  /* Override this color in your theme stylesheet */
}

/* line 24, ../sass/inuit.css/partials/objects/_matrix.scss */
.matrix {
  list-style: none;
  margin-left: 0;
  border-top-width: 1px;
  border-left-width: 1px;
}

/* line 31, ../sass/inuit.css/partials/objects/_matrix.scss */
.matrix > li {
  padding: 12px;
  float: left;
  border-right-width: 1px;
  border-bottom-width: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  -ms-box-sizing: border-box;
  -o-box-sizing: border-box;
  box-sizing: border-box;
}

/* line 38, ../sass/inuit.css/partials/objects/_matrix.scss */
.matrix__link {
  display: block;
  padding: 12px;
  margin: -12px;
}

/**
 * The `.multi-list` object is a lot like the `.matrix` object only without the
 * blocky borders and padding.
 * 
   <ul class="multi-list  four-cols">
       <li>Lorem</li>
       <li>Ipsum</li>
       <li>Dolor</li>
       <li>Sit</li>
   </ul>
 * 
 * Demo: jsfiddle.net/inuitcss/Y2zrU
 * 
 */
/* line 59, ../sass/inuit.css/partials/objects/_matrix.scss */
.multi-list {
  list-style: none;
  margin-left: 0;
}

/* line 64, ../sass/inuit.css/partials/objects/_matrix.scss */
.multi-list > li {
  float: left;
}

/**
 * Apply these classes alongside the `.matrix` or `.multi-list` classes on
 * lists to determine how wide their columns are.
 */
/* line 73, ../sass/inuit.css/partials/objects/_matrix.scss */
.two-cols > li {
  width: 50%;
}

/* line 76, ../sass/inuit.css/partials/objects/_matrix.scss */
.three-cols > li {
  width: 33.333%;
}

/* line 79, ../sass/inuit.css/partials/objects/_matrix.scss */
.four-cols > li {
  width: 25%;
}

/* line 82, ../sass/inuit.css/partials/objects/_matrix.scss */
.five-cols > li {
  width: 20%;
}

/**
 * Unfortunately we have to qualify this selector in order to bring its
 * specificity above the `.[number]-cols > li` selectors above.
 */
/* line 90, ../sass/inuit.css/partials/objects/_matrix.scss */
.matrix > .all-cols,
.multi-list > .all-cols {
  width: 100%;
}

/*------------------------------------*\
    $SPLIT
\*------------------------------------*/
/**
 * Simple split item for creating two elements floated away from one another,
 * e.g.:
 * 
   <dl class=split>       
       <dt class=split__title>Burger and fries</dt>
       <dd>&pound;5.99</dd>       
       <dt class=split__title>Fillet steak</dt>
       <dd>&pound;19.99</dd>       
       <dt class=split__title>Ice cream</dt>
       <dd>&pound;2.99</dd>       
   </dl>
 * 
   <ol class="split  results">
       <li class=first><b class=split__title>1st place</b> Bob</li>       
       <li class=second><b class=split__title>2nd place</b> Lilly</li>       
       <li class=third><b class=split__title>3rd place</b> Ted</li>       
   </ol>ΓÇï
 * 
 * Demo: jsfiddle.net/inuitcss/9gZW7
 * 
 */
/* line 26, ../sass/inuit.css/partials/objects/_split.scss */
.split {
  text-align: right;
  list-style: none;
  margin-left: 0;
}

/* line 31, ../sass/inuit.css/partials/objects/_split.scss */
.split__title {
  text-align: left;
  float: left;
  clear: left;
}

/*------------------------------------*\
    $THIS-OR-THIS
\*------------------------------------*/
/**
 * Simple options object to provide multiple choices, e.g.:
 * 
   <h1 class=this-or-this>
       <a href=# class="this-or-this__this  two-fifths">
           Free
       </a>
       <span class="this-or-this__or  one-fifth">
           or
       </span>
       <a href=# class="this-or-this__this  two-fifths">
           Pro
       </a>
   </h1>
 * 
 * The `.this` and `.or` objects can be sized using the grid-system classes.
 * 
 * Demo: jsfiddle.net/inuitcss/R3sks
 * 
 */
/* line 24, ../sass/inuit.css/partials/objects/_this-or-this.scss */
.this-or-this {
  display: table;
  width: 100%;
  text-align: center;
}

/* line 30, ../sass/inuit.css/partials/objects/_this-or-this.scss */
.this-or-this__this,
.this-or-this__or {
  display: table-cell;
  vertical-align: middle;
}

/*------------------------------------*\
    $COMPLEX-LINK
\*------------------------------------*/
/**
 * As inspired by @necolas:
 * github.com/necolas/suit-utils/blob/master/link.css#L18
 * 
 * Add hover behaviour to only slected items within links, e.g.:
 * 
   <a href=log-in class=complex-link>
       <i class="s  s--user"></i>
       <span class=complex-link__target>Log in</span>
   </a>
 * 
 * Demo: jsfiddle.net/inuitcss/rt9M3
 * 
 */
/* line 21, ../sass/inuit.css/partials/objects/_complex-link.scss */
.complex-link,
.complex-link:hover,
.complex-link:active,
.complex-link:focus {
  text-decoration: none;
}

/* line 26, ../sass/inuit.css/partials/objects/_complex-link.scss */
.complex-link:hover .complex-link__target,
.complex-link:active .complex-link__target,
.complex-link:focus .complex-link__target {
  text-decoration: underline;
}

/*------------------------------------*\
    $FLYOUT
\*------------------------------------*/
/**
 * Flyouts are pieces of content that fly out of a parent when said parent is
 * hovered. They typically appear bottom-left of the parent.
 * 
   <div class=flyout>
       Foo
       <div class=flyout__content>
           <h1>Lorem</h1>
           <p>Ipsum</p>
       </div>
   </div>
 * 
 * Extend these objects in your theme stylesheet.
 * 
 * Demo: jsfiddle.net/inuitcss/B52HG
 * 
 */
/* line 22, ../sass/inuit.css/partials/objects/_flyout.scss */
.flyout,
.flyout--alt {
  position: relative;
  overflow: hidden;
}

/* line 26, ../sass/inuit.css/partials/objects/_flyout.scss */
.flyout__content {
  /**
   * Position the flyouts off-screen. This is typically better than
   * `display:none;`.
   */
  position: absolute;
  top: 100%;
  left: -99999px;
}

/**
 * Bring the flyouts into view when you hover their parents.
 * Two different types of flyout; ΓÇÿregularΓÇÖ (`.flyout`) and ΓÇÿalternativeΓÇÖ
 * (`.flyout--alt`).
 */
/* line 42, ../sass/inuit.css/partials/objects/_flyout.scss */
.flyout:hover,
.flyout--alt:hover {
  overflow: visible;
}

/**
 * Regular flyouts sit all the way from the top, flush left.
 */
/* line 49, ../sass/inuit.css/partials/objects/_flyout.scss */
.flyout:hover > .flyout__content {
  left: 0;
}

/**
 * Alternative flyouts sit all the way from the left, flush top.
 */
/* line 56, ../sass/inuit.css/partials/objects/_flyout.scss */
.flyout--alt:hover > .flyout__content {
  top: 0;
  left: 100%;
}

/*------------------------------------*\
    $SPRITE
\*------------------------------------*/
/**
 * Giving an element a class of `.s` will throw it into ΓÇÿspriteΓÇÖ mode and apply
 * a background image e.g.:
 * 
   <a class="s  s--question-mark">More info&hellip;</a>
 * 
 * or
 * 
   <a href=#><i class="s  s--question-mark"></i> Help and FAQ</a>
 * 
 * Giving an element a class of `.i` will throw it into ΓÇÿiconΓÇÖ mode and will
 * not add a background, but should be used for icon fonts and is populated
 * through a `data-char` attribute and the `:after` pseudo-element, e.g.:
 * 
   <a href=# class=i data-char="C">Add to favorites</a>
 * 
 * or
 * 
   <a href=#><i class=i data-char="C"></i> View your favourites</a>
 * 
 * Where ΓÇÿCΓÇÖ might map to a star in your particular font.
 * 
 * These all require extension in your theme stylesheet.
 * 
 * Demo: jsfiddle.net/inuitcss/6TKuS
 * 
 */
/* line 32, ../sass/inuit.css/partials/objects/_sprite.scss */
.s,
.i {
  display: inline-block;
  /**
   * The typical size of most icons. Override in your theme stylesheet.
   */
  width: 16px;
  height: 16px;
  position: relative;
  zoom: 1;
  /**
   * So using `.i` on `i` elements doesnΓÇÖt make a visual difference.
   */
  font-style: normal;
  /**
   * So icons added using `.i` sit in the centre of the element.
   */
  text-align: center;
}

/* line 50, ../sass/inuit.css/partials/objects/_sprite.scss */
.s {
  background-image: url(/path/to/your/sprite.png);
  vertical-align: middle;
  top: -1px;
  /*
   * H5BP method image replacement:
   * github.com/h5bp/html5-boilerplate/commit/adecc5da035d6d76b77e3fa95c6abde841073da2
   */
  overflow: hidden;
  *text-indent: -9999px;
}
/* line 62, ../sass/inuit.css/partials/objects/_sprite.scss */
.s:before {
  content: "";
  display: block;
  width: 0;
  height: 100%;
}

/* line 71, ../sass/inuit.css/partials/objects/_sprite.scss */
.i {
  vertical-align: top;
}
/* line 74, ../sass/inuit.css/partials/objects/_sprite.scss */
.i:after {
  content: attr(data-char);
}

/*------------------------------------*\
    $ICON-TEXT
\*------------------------------------*/
/**
 * For text-links etc that have an icon with them. Sometimes whitespace would
 * suffice in creating a gap between the icon and text, for example:
 * 
   <a href=#>
       <i class="s  s--help"></i> Help &amp; support
   </a>
 * 
 * However we will sometimes want a larger, explicity set gap:
   <a href=# class=icon-text>
       <i class="icon-text__icon  s s--help"></i>Help &amp; support
   </a>
 * 
 * Demo: jsfiddle.net/inuitcss/Q6Lbf
 * 
 */
/* line 20, ../sass/inuit.css/partials/objects/_icon-text.scss */
.icon-text > .icon-text__icon {
  margin-right: 8px;
}

/**
 * We can also reverse the direction of the margin for icons that appear to the
 * right of the text content, thus:
 *
   <a href=# class=icon-text--rev>
       Help &amp; support<i class="icon-text__icon  s s--help"></i>
   </a>
 *
 */
/* line 34, ../sass/inuit.css/partials/objects/_icon-text.scss */
.icon-text--rev > .icon-text__icon {
  margin-left: 8px;
}

/*------------------------------------*\
    $BUTTONS
\*------------------------------------*/
/**
 * Basic button structural styling. Extend in your theme stylesheet.
 * 
 * Demo: jsfiddle.net/inuitcss/RqHcp
 * 
 */
/* line 10, ../sass/inuit.css/partials/objects/_buttons.scss */
.btn {
  font: inherit;
  cursor: pointer;
  border: none;
  display: inline-block;
  margin: 0;
  line-height: 1;
  /**
   * Set padding in ems so we can change the size of a button by merely
   * altering its `font-size`.
   */
  padding: 0.5em;
}

/* line 24, ../sass/inuit.css/partials/objects/_buttons.scss */
.btn,
.btn:hover {
  text-decoration: none;
}

/**
 * Basic button modifiers
 */
/* line 31, ../sass/inuit.css/partials/objects/_buttons.scss */
.btn--sml {
  font-size: .75em;
}

/* line 32, ../sass/inuit.css/partials/objects/_buttons.scss */
.btn--lrg {
  font-size: 1.50em;
}

/* line 34, ../sass/inuit.css/partials/objects/_buttons.scss */
.btn--full {
  display: block;
  text-align: center;
  /**
   * The following is so that `.btn-full` works properly on `input`s as well
   * as `a`s.
   */
  padding-right: 0;
  padding-left: 0;
  width: 100%;
}

/*------------------------------------*\
    $LOZENGES
\*------------------------------------*/
/**
 * Create pill-like runs of text, e.g.:
 * 
   <p>This <span class=loz>here</span> is a lozenge!</p>
 * 
   <h1>This <span class=loz>here</span> is also a lozenge!</h1>
 * 
 * Demo: jsfiddle.net/inuitcss/N3pGm
 * 
 */
/* line 14, ../sass/inuit.css/partials/objects/_lozenges.scss */
.loz {
  display: inline-block;
  /**
   * These numbers set in ems mean that, at its narrowest, a lozenge will be
   * the same width as the 1.5 `line-height` set on the `html` element.
   * This allows us to use the `.loz` in any `font-size` we wish.
   */
  min-width: 1.00em;
  padding-right: 0.25em;
  padding-left: 0.25em;
  /* =1.50em */
  text-align: center;
  background-color: #ccc;
  /* Override this color in your theme stylesheet */
  color: #fff;
  /* Override this color in your theme stylesheet */
  /**
   * Normally weΓÇÖd use border-radius:100%; but instead here we just use an
   * overly large number; `border-radius:100%;` would create an oval on
   * non-square elements whereas we just want to round the ends of an element.
   */
  -webkit-border-radius: 100px;
  -moz-border-radius: 100px;
  -ms-border-radius: 100px;
  -o-border-radius: 100px;
  border-radius: 100px;
}

/*------------------------------------*\
    $GREYBOX
\*------------------------------------*/
/**
 * Quickly throw together greybox wireframes. Use in conjunction with other
 * inuit.css objects to create simple greybox prototypes, e.g.:
 * 
   <div class="island  greybox  greybox--medium">Header</div>
   
   <ul class="nav  nav--fit  nav--block  greybox">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 * 
 * The beauty of combining the greyboxing with inuit.css objects is that any
 * prototyping can quickly be converted into/used as production code.
 * 
 * For a more complete prototyping framework, consider Adam WhitcroftΓÇÖs Proto:
 * adamwhitcroft.com/proto
 * 
 * Demo: jsfiddle.net/inuitcss/qCXfh/
 * 
 */
/* line 27, ../sass/inuit.css/partials/objects/_greybox.scss */
.greybox,
.graybox {
  font-size: 12px;
  font-size: 0.75rem;
  line-height: 2;
  font-family: sans-serif;
  text-align: center;
  background-color: rgba(0, 0, 0, 0.2);
  color: #fff;
}

/* line 35, ../sass/inuit.css/partials/objects/_greybox.scss */
.greybox a,
.graybox a {
  color: #fff;
  text-decoration: underline;
}

/**
 * All greyboxes will occupy 100% of their parentΓÇÖs width, but to alter their
 * heights we apply incrementally larger line-heights:
 */
/* line 46, ../sass/inuit.css/partials/objects/_greybox.scss */
.greybox--small,
.graybox--small {
  line-height: 48px;
}

/* line 48, ../sass/inuit.css/partials/objects/_greybox.scss */
.greybox--medium,
.graybox--medium {
  line-height: 96px;
}

/* line 50, ../sass/inuit.css/partials/objects/_greybox.scss */
.greybox--large,
.graybox--large {
  line-height: 192px;
}

/* line 52, ../sass/inuit.css/partials/objects/_greybox.scss */
.greybox--huge,
.graybox--huge {
  line-height: 384px;
}

/* line 54, ../sass/inuit.css/partials/objects/_greybox.scss */
.greybox--gigantic,
.graybox--gigantic {
  line-height: 768px;
}

/**
 * Style trumps; helper and brand classes
 */
/*------------------------------------*\
    $BRAND
\*------------------------------------*/
/**
 * `.brand` is a quick and simple way to apply your brand face and/or color to
 * any element using a handy helper class.
 */
/* line 8, ../sass/inuit.css/partials/generic/_brand.scss */
.brand {
  font-family: "Helvetica Neue", sans-serif!important;
  color: #4a8ec2!important;
}

/* line 12, ../sass/inuit.css/partials/generic/_brand.scss */
.brand-face {
  font-family: "Helvetica Neue", sans-serif!important;
}

/* line 16, ../sass/inuit.css/partials/generic/_brand.scss */
.brand-color,
.brand-colour {
  color: #4a8ec2!important;
}

/*------------------------------------*\
    $HELPER
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesnΓÇÖt already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.fl` class to the markup.
 */
/* line 10, ../sass/inuit.css/partials/generic/_helper.scss */
.fr {
  float: right;
}

/* line 11, ../sass/inuit.css/partials/generic/_helper.scss */
.fl {
  float: left;
}

/* line 14, ../sass/inuit.css/partials/generic/_helper.scss */
.text-center,
.text-centre {
  text-align: center;
}

/**
 * Pull items full width of `.island` parents.
 */
/* line 22, ../sass/inuit.css/partials/generic/_helper.scss */
.full-bleed {
  margin-right: -24px;
  margin-left: -24px;
}
/* line 26, ../sass/inuit.css/partials/generic/_helper.scss */
.islet .full-bleed {
  margin-right: -12px;
  margin-left: -12px;
}

/**
 * Add a help cursor to any element that gives the user extra information on
 * `:hover`.
 */
/* line 37, ../sass/inuit.css/partials/generic/_helper.scss */
.informative {
  cursor: help;
}

/**
 * Align items to the right where they imply progression/movement forward, e.g.:
 * 
   <p class=proceed><a href=#>Read more...</a></p>
 * 
 */
/* line 48, ../sass/inuit.css/partials/generic/_helper.scss */
.proceed {
  text-align: right;
}

/**
 * Add a right-angled quote to links that imply movement, e.g.:
 * 
   <a href=# class=go>Read more</a>
 * 
 */
/* line 59, ../sass/inuit.css/partials/generic/_helper.scss */
.go:after {
  content: " ┬╗";
}

/**
 * Apply capital case to an element (usually a `strong`).
 */
/* line 67, ../sass/inuit.css/partials/generic/_helper.scss */
.caps {
  text-transform: uppercase;
}

/**
 * Hide content off-screen without resorting to `display:none;`
 */
/* line 75, ../sass/inuit.css/partials/generic/_helper.scss */
.accessibility {
  position: absolute;
  left: -99999px;
}

/* line 76, ../sass/inuit.css/partials/generic/_helper.scss */
[dir=rtl] .accessibility {
  left: auto;
  right: -99999px;
}

/* line 41, ../sass/grid/_grid.scss */
body {
  width: 100%;
  *zoom: 1;
}
/* line 27, ../sass/grid/_grid.scss */
body:before, body:after {
  content: "";
  display: table;
}
/* line 31, ../sass/grid/_grid.scss */
body:after {
  clear: both;
}

/* line 5, ../sass/montys/_mixins.scss */
.container {
  display: block;
  position: relative;
  margin: auto;
}

/* line 11, ../sass/montys/_mixins.scss */
.title, .news-home .title, .news .title {
  margin-top: 0;
}

/* line 17, ../sass/montys/_mixins.scss */
.container {
  outline: 1px solid red;
}

/* line 21, ../sass/montys/_mixins.scss */
.header, .main-home, .main, .promo, .portals-home, .sidebar, .news-home, .news, .footer {
  outline: 1px solid #ffcc00;
}

/* line 25, ../sass/montys/_mixins.scss */
.subsection {
  outline: 1px solid yellow;
}

/* line 29, ../sass/montys/_mixins.scss */
.main-nav, .sub-nav {
  outline: 1px solid lime;
}

/* line 33, ../sass/montys/_mixins.scss */
.search {
  outline: 1px solid magenta;
}

/* line 37, ../sass/montys/_mixins.scss */
.news-home .widget, .news .widget {
  outline: 1px solid #00bbff;
}

/* line 8, ../sass/montys/_layout.scss */
* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

/* line 10, ../sass/montys/_layout.scss */
html {
  font-family: sans-serif;
}

/* line 12, ../sass/montys/_layout.scss */
body {
  margin-top: 50px;
}

/* line 14, ../sass/montys/_layout.scss */
.container {
  margin-top: 0;
  max-width: 1180px;
}

/* line 21, ../sass/montys/_layout.scss */
.header {
  position: relative;
  margin-bottom: 0;
  padding-top: 60px;
}
/* line 28, ../sass/montys/_layout.scss */
.header .logo {
  float: left;
  width: 42%;
  max-width: 175px;
  margin-right: 12px;
}

/* line 36, ../sass/montys/_layout.scss */
.main-nav {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  padding: 12px 24px;
  background: #fff;
  opacity: 0;
  -webkit-transition-property: all;
  -moz-transition-property: all;
  -o-transition-property: all;
  transition-property: all;
  -webkit-transition-duration: 0.25s;
  -moz-transition-duration: 0.25s;
  -o-transition-duration: 0.25s;
  transition-duration: 0.25s;
}
/* line 48, ../sass/montys/_layout.scss */
.main-nav .nav {
  margin: 0;
  padding: 0;
}
/* line 52, ../sass/montys/_layout.scss */
.main-nav .nav > li {
  padding: 6px 0;
  display: list-item;
}
/* line 56, ../sass/montys/_layout.scss */
.main-nav .nav > li > a {
  display: block;
}
/* line 61, ../sass/montys/_layout.scss */
.main-nav .nav .menu-head {
  text-align: center;
  margin: 0;
  cursor: pointer;
  margin-top: 6px;
}

/* line 70, ../sass/montys/_layout.scss */
.sub-nav {
  display: none;
}

/* line 75, ../sass/montys/_layout.scss */
.search {
  float: left;
  width: 50%;
  display: table;
}
/* line 82, ../sass/montys/_layout.scss */
.search .text-input {
  float: left;
  width: 60%;
  margin-right: 0.5em;
}
/* line 88, ../sass/montys/_layout.scss */
.search input[type="submit"] {
  float: left;
}

/* line 102, ../sass/montys/_layout.scss */
.promo {
  margin-bottom: 0;
}

/* line 108, ../sass/montys/_layout.scss */
.product-lede > img {
  display: none;
}

/* line 111, ../sass/montys/_layout.scss */
.portals-home {
  overflow: hidden;
  margin-bottom: 0;
}

/* line 121, ../sass/montys/_layout.scss */
.title {
  line-height: 1.2em;
}

/* line 126, ../sass/montys/_layout.scss */
.dl-list {
  margin: 0;
  padding: 0;
  list-style: none;
}
/* line 131, ../sass/montys/_layout.scss */
.dl-list .pdf {
  display: inline-block;
  height: 10px;
  width: 10px;
  background: #fc0;
}

/* line 139, ../sass/montys/_layout.scss */
.btn__link {
  border: 1px solid #aaa;
  margin-bottom: 24px;
}
/* line 142, ../sass/montys/_layout.scss */
.btn__link.dl {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.33333;
}

/* line 147, ../sass/montys/_layout.scss */
.gallery-wrap {
  max-width: 636px;
}
/* line 150, ../sass/montys/_layout.scss */
.gallery-wrap > img {
  float: left;
  margin: 0 12px 12px 0;
}

/* line 160, ../sass/montys/_layout.scss */
.news-home, .news {
  margin-bottom: 0;
}

/* line 177, ../sass/montys/_layout.scss */
.footer p {
  margin: 0;
}

@media screen and (min-width: 37.5em) {
  /* line 184, ../sass/montys/_layout.scss */
  .subsection {
    float: left;
    width: 48%;
  }
  /* line 187, ../sass/montys/_layout.scss */
  .subsection:nth-child(2n+1) {
    clear: both;
    margin-right: 4%;
  }

  /* line 194, ../sass/montys/_layout.scss */
  .news-home .widget {
    float: left;
    width: 48%;
  }
  /* line 197, ../sass/montys/_layout.scss */
  .news-home .widget:nth-child(2n) {
    clear: both;
    margin-right: 4%;
  }

  /* line 205, ../sass/montys/_layout.scss */
  .news .widget {
    display: block;
  }
}
@media screen and (min-width: 48em) {
  /* line 214, ../sass/montys/_layout.scss */
  .header {
    position: relative;
    padding-bottom: 0;
    padding-top: 24px;
  }
  /* line 219, ../sass/montys/_layout.scss */
  .header .logo {
    float: left;
    width: 175px;
  }
  /* line 224, ../sass/montys/_layout.scss */
  .header .search {
    float: right;
    width: 35%;
  }
  /* line 228, ../sass/montys/_layout.scss */
  .header .search .text-input {
    width: 70%;
  }

  /* line 234, ../sass/montys/_layout.scss */
  .main-nav {
    clear: both;
    position: static;
    background: none;
    display: table;
    width: 100%;
    filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100);
    opacity: 1;
  }
  /* line 242, ../sass/montys/_layout.scss */
  .main-nav .nav {
    display: table-row;
  }
  /* line 244, ../sass/montys/_layout.scss */
  .main-nav .nav > li {
    display: table-cell;
    text-align: center;
    padding: 3px;
  }
  /* line 248, ../sass/montys/_layout.scss */
  .main-nav .nav > li.mobile-only {
    display: none;
  }
  /* line 251, ../sass/montys/_layout.scss */
  .main-nav .nav .menu-head {
    display: none;
  }

  /* line 255, ../sass/montys/_layout.scss */
  .sub-nav {
    display: block;
    float: right;
  }
  /* line 259, ../sass/montys/_layout.scss */
  .sub-nav .nav {
    margin: 0;
  }
  /* line 262, ../sass/montys/_layout.scss */
  .sub-nav .nav > li:after {
    content: "|";
    position: relative;
    margin: 0 0.5em;
  }
  /* line 268, ../sass/montys/_layout.scss */
  .sub-nav .nav li:last-child:after {
    content: "";
    position: absolute;
  }

  /* line 275, ../sass/montys/_layout.scss */
  .main {
    float: left;
    width: 70%;
  }

  /* line 281, ../sass/montys/_layout.scss */
  .product-lede > img {
    display: block;
    width: 175px;
  }

  /* line 287, ../sass/montys/_layout.scss */
  .sidebar {
    float: left;
    width: 30%;
  }
}
@media screen and (min-width: 60em) {
  /* line 296, ../sass/montys/_layout.scss */
  .portals-home {
    float: left;
    width: 70%;
  }

  /* line 301, ../sass/montys/_layout.scss */
  .subsection {
    float: none;
    width: 85%;
  }

  /* line 306, ../sass/montys/_layout.scss */
  .news-home {
    float: left;
    width: 30%;
  }
  /* line 310, ../sass/montys/_layout.scss */
  .news-home .widget {
    float: none;
    width: 100%;
  }
}
/* line 4, ../sass/montys/_ie.scss */
.lt-ie9 .container {
  min-width: 900px;
}
/* line 8, ../sass/montys/_ie.scss */
.lt-ie9 .header {
  position: relative;
  padding-bottom: 0;
  padding-top: 24px;
}
/* line 13, ../sass/montys/_ie.scss */
.lt-ie9 .header .logo {
  float: left;
  width: 175px;
}
/* line 18, ../sass/montys/_ie.scss */
.lt-ie9 .header .search {
  float: right;
  width: 35%;
}
/* line 22, ../sass/montys/_ie.scss */
.lt-ie9 .header .search .text-input {
  width: 70%;
}
/* line 28, ../sass/montys/_ie.scss */
.lt-ie9 .main-nav {
  clear: both;
  position: static;
  background: none;
  display: table;
  width: 100%;
  filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100);
  opacity: 1;
}
/* line 36, ../sass/montys/_ie.scss */
.lt-ie9 .main-nav .nav {
  display: table-row;
}
/* line 38, ../sass/montys/_ie.scss */
.lt-ie9 .main-nav .nav > li {
  display: table-cell;
  text-align: center;
  padding: 3px;
}
/* line 42, ../sass/montys/_ie.scss */
.lt-ie9 .main-nav .nav > li.mobile-only {
  display: none;
}
/* line 45, ../sass/montys/_ie.scss */
.lt-ie9 .main-nav .nav .menu-head {
  display: none;
}
/* line 49, ../sass/montys/_ie.scss */
.lt-ie9 .sub-nav {
  display: block;
  float: right;
}
/* line 53, ../sass/montys/_ie.scss */
.lt-ie9 .sub-nav .nav {
  margin: 0;
}
/* line 56, ../sass/montys/_ie.scss */
.lt-ie9 .sub-nav .nav > li:after {
  content: "|";
  position: relative;
  margin: 0 0.5em;
}
/* line 62, ../sass/montys/_ie.scss */
.lt-ie9 .sub-nav .nav li:last-child:after {
  content: "";
  position: absolute;
}
/* line 69, ../sass/montys/_ie.scss */
.lt-ie9 .main {
  float: left;
  width: 70%;
}
/* line 75, ../sass/montys/_ie.scss */
.lt-ie9 .product-lede > img {
  display: block;
  width: 175px;
}
/* line 81, ../sass/montys/_ie.scss */
.lt-ie9 .sidebar {
  float: left;
  width: 30%;
}
/* line 86, ../sass/montys/_ie.scss */
.lt-ie9 .portals-home {
  float: left;
  width: 70%;
}
/* line 91, ../sass/montys/_ie.scss */
.lt-ie9 .subsection {
  float: none;
  width: 85%;
}
/* line 96, ../sass/montys/_ie.scss */
.lt-ie9 .news-home {
  float: left;
  width: 30%;
}
/* line 100, ../sass/montys/_ie.scss */
.lt-ie9 .news-home .widget {
  float: none;
  width: 100%;
}

/* line 3, ../sass/tiles/partials/_switcher.scss */
.container {
  z-index: 50 !important;
}

/* line 5, ../sass/tiles/partials/_switcher.scss */
.switcher {
  position: fixed;
  top: 0;
  width: 100%;
  height: 50px;
  padding: 12px 24px;
  background: #444;
  z-index: 1000;
}

/* line 15, ../sass/tiles/partials/_switcher.scss */
.switcher-title {
  float: left;
  font-size: 1.4em;
  line-height: 1em;
  color: #ddd;
  text-transform: uppercase;
}

/* line 23, ../sass/tiles/partials/_switcher.scss */
.switcher-select {
  float: right;
}
